import os
import sqlite3
import csv
import asyncio
import nest_asyncio
import matplotlib.pyplot as plt
import pandas as pd
import logging
from datetime import datetime, time, timedelta
from io import BytesIO
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
from aiohttp import web

# ========================== –ù–ê–°–¢–†–û–ô–ö–ò ==========================
BOT_TOKEN = os.getenv("BOT_TOKEN")
ALLOWED_USERS = list(map(int, os.getenv("ALLOWED_USERS", "").split(",")))  # –°–ø–∏—Å–æ–∫ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ ENV

DB_FILE = "sales.db"

# ========================== –õ–û–ì–ò ===============================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ========================
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS sales (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                item TEXT,
                category TEXT,
                amount REAL,
                quantity INTEGER,
                timestamp TEXT
            )
        """)

def is_allowed(user_id):
    return user_id in ALLOWED_USERS

def add_sale(user_id, item, category, amount, quantity=1):
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute(
            "INSERT INTO sales (user_id, item, category, amount, quantity, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, item, category, amount, quantity, datetime.now().isoformat())
        )

def get_sales():
    with sqlite3.connect(DB_FILE) as conn:
        return conn.execute("SELECT * FROM sales").fetchall()

def get_sales_between(start_time, end_time):
    with sqlite3.connect(DB_FILE) as conn:
        return conn.execute(
            "SELECT * FROM sales WHERE timestamp BETWEEN ? AND ?",
            (start_time.isoformat(), end_time.isoformat())
        ).fetchall()

def delete_last_sale(user_id):
    with sqlite3.connect(DB_FILE) as conn:
        last = conn.execute("SELECT id FROM sales WHERE user_id=? ORDER BY id DESC LIMIT 1", (user_id,)).fetchone()
        if last:
            conn.execute("DELETE FROM sales WHERE id=?", (last[0],))
            return True
        return False

def reset_db():
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("DELETE FROM sales")

def export_csv():
    data = get_sales()
    filename = f"sales_export_{datetime.now().strftime('%Y%m%d%H%M%S')}.csv"
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["ID", "User ID", "Item", "Category", "Amount", "Quantity", "Timestamp"])
        writer.writerows(data)
    return filename

def export_excel():
    data = get_sales()
    df = pd.DataFrame(data, columns=["ID", "User ID", "Item", "Category", "Amount", "Quantity", "Timestamp"])
    filename = f"sales_export_{datetime.now().strftime('%Y%m%d%H%M%S')}.xlsx"
    df.to_excel(filename, index=False)
    return filename

# ========================== –ì–†–ê–§–ò–ö–ò ============================
def generate_sales_chart(sales, title):
    dates = [datetime.fromisoformat(r[6]).date() for r in sales]
    amounts = [r[4] * r[5] for r in sales]
    daily_summary = {}
    for d, a in zip(dates, amounts):
        daily_summary[d] = daily_summary.get(d, 0) + a
    sorted_dates = sorted(daily_summary)
    values = [daily_summary[day] for day in sorted_dates]

    plt.figure(figsize=(10, 4))
    plt.plot(sorted_dates, values, marker='o')
    plt.title(title)
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–°—É–º–º–∞, ‚ÇΩ")
    plt.grid(True)
    plt.tight_layout()

    buffer = BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    plt.close()
    return buffer

# ========================== –ö–ù–û–ü–ö–ò =============================
def main_keyboard(is_admin):
    buttons = [
        [KeyboardButton("üè¶ –¢–æ–≤–∞—Ä—ã"), KeyboardButton("üö≤ –£—Å–ª—É–≥–∏")],
        [KeyboardButton("üìä –û–±—â–∞—è —Å—É–º–º–∞"), KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [KeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞")],
        [KeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# ========================== –°–û–°–¢–û–Ø–ù–ò–Ø ==========================
user_states = {}

# ========================== –•–ï–ù–î–õ–ï–†–´ ===========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_allowed(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard(True))

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {user_id}: {text}")

    if not is_allowed(user_id):
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if text == "üè¶ –¢–æ–≤–∞—Ä—ã":
        user_states[user_id] = {"step": "enter_price", "item": "–ü—Ä–æ–≥—Ä–∞–º–º–∞", "category": "product"}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è '–ü—Ä–æ–≥—Ä–∞–º–º–∞':\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    elif text == "üö≤ –£—Å–ª—É–≥–∏":
        user_states[user_id] = {"step": "enter_price", "item": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ö", "category": "service"}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–ö':\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    elif text == "üìù –ó–∞–º–µ—Ç–∫–∞":
        user_states[user_id] = {"step": "enter_note"}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

    elif text == "–û—Ç–º–µ–Ω–∞":
        if user_states.get(user_id):
            user_states.pop(user_id)
            await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard(True))
        else:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.")

    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        rows = get_sales()
        if rows:
            msg = "\n".join([f"{r[2]} ‚Äî {r[4]}‚ÇΩ" for r in rows[-10:]])
            await update.message.reply_text(f"üìÉ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏:\n{msg}")
        else:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")

    elif text == "üìä –û–±—â–∞—è —Å—É–º–º–∞":
        total = sum(r[4] * r[5] for r in get_sales())
        await update.message.reply_text(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total} ‚ÇΩ")

    elif text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        kb = [
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")],
            [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="export_excel")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="delete_last")],
            [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É", callback_data="reset")],
            [InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂", callback_data="chart")]
        ]
        await update.message.reply_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(kb))

    else:
        state = user_states.get(user_id)
        if state:
            if state.get("step") == "enter_price":
                if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                    user_states.pop(user_id)
                    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard(True))
                    return
                try:
                    amount = float(text)
                    add_sale(user_id, state["item"], state["category"], amount)
                    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {state['item']} ‚Äî {amount}‚ÇΩ", reply_markup=main_keyboard(True))
                    user_states.pop(user_id)
                except:
                    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

            elif state.get("step") == "enter_note":
                if text.lower() == "–æ—Ç–º–µ–Ω–∞":
                    user_states.pop(user_id)
                    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_keyboard(True))
                    return
                # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –∫–∞–∫ item='–ó–∞–º–µ—Ç–∫–∞' –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
                add_sale(user_id, "–ó–∞–º–µ—Ç–∫–∞", "note", 0, 1)
                await update.message.reply_text(f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}", reply_markup=main_keyboard(True))
                user_states.pop(user_id)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_keyboard(True))

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    logger.info(f"Callback –æ—Ç {user_id}: {data}")
    await query.answer()

    if not is_allowed(user_id):
        await query.edit_message_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if data == "export_csv":
        file = export_csv()
        await query.message.reply_document(document=open(file, "rb"))
        os.remove(file)

    elif data == "export_excel":
        file = export_excel()
        await query.message.reply_document(document=open(file, "rb"))
        os.remove(file)

    elif data == "delete_last":
        msg = "–£–¥–∞–ª–µ–Ω–æ." if delete_last_sale(user_id) else "–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å."
        await query.edit_message_text(msg)

    elif data == "reset":
        reset_db()
        await query.edit_message_text("–ë–∞–∑–∞ –æ—á–∏—â–µ–Ω–∞.")

    elif data == "chart":
        now = datetime.now()
        start = now - timedelta(days=30)
        sales = get_sales_between(start, now)
        if sales:
            chart = generate_sales_chart(sales, "–ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –º–µ—Å—è—Ü")
            await query.message.reply_photo(photo=InputFile(chart, filename="chart.png"))
        else:
            await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# ======== –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã Render –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª —Å–µ—Ä–≤–∏—Å) =======
async def handle(request):
    return web.Response(text="Bot is running")

async def start_web_server():
    app_web = web.Application()
    app_web.add_routes([web.get('/', handle)])
    runner = web.AppRunner(app_web)
    await runner.setup()
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"Web server started on port {port}")

# ========== –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ ==========
async def main_async():
    init_db()
    global app
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.job_queue.run_daily(send_daily_report, time(hour=22, minute=0))
    await start_web_server()
    await app.run_polling()

# ========== –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç ==========
async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    rows = get_sales()
    total = sum(r[4] * r[5] for r in rows)
    if total > 0:
        msg = "\n".join([f"{r[2]} ‚Äî {r[4]}‚ÇΩ" for r in rows[-10:]])
        for admin_id in ALLOWED_USERS:
            await context.bot.send_message(admin_id, f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n–û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ\n\n{msg}")

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main_async())
